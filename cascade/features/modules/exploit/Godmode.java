/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketConfirmTeleport
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.event.events.MoveEvent;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.util.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class Godmode
extends Module {
    public Setting<Integer> disable = this.register(new Setting<Integer>("DisableTime", 2850, 500, 3000));
    public Setting<Float> offset = this.register(new Setting<Float>("YOffset", Float.valueOf(3.0f), Float.valueOf(-9.0f), Float.valueOf(9.0f)));
    private Timer timer = new Timer();
    private int teleportId = 0;

    public Godmode() {
        super("Godmode", Module.Category.EXPLOIT, "wow!!");
    }

    @SubscribeEvent
    public void onMove(MoveEvent e) {
        if (this.teleportId != 0 && this.isEnabled()) {
            e.setCanceled(true);
            if (this.timer.passedMs(this.disable.getValue().intValue())) {
                this.disable();
            }
        }
    }

    @Override
    public void onEnable() {
        if (Godmode.fullNullCheck()) {
            this.disable();
            return;
        }
        this.teleportId = 0;
        mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(Godmode.mc.player.posX, Godmode.mc.player.posY + (double)this.offset.getValue().floatValue(), Godmode.mc.player.posZ, Godmode.mc.player.onGround));
    }

    @Override
    public void onDisable() {
        if (Godmode.fullNullCheck()) {
            return;
        }
        mc.getConnection().sendPacket((Packet)new CPacketConfirmTeleport(this.teleportId));
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send e) {
        if (e.getPacket() instanceof CPacketConfirmTeleport && this.isEnabled()) {
            this.teleportId = ((CPacketConfirmTeleport)e.getPacket()).getTeleportId();
            this.timer.reset();
            e.setCanceled(true);
        }
    }
}

