/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.network.play.client.CPacketConfirmTeleport
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.client.CPacketPlayer$PositionRotation
 *  net.minecraft.network.play.client.CPacketPlayer$Rotation
 *  net.minecraft.network.play.server.SPacketPlayerPosLook
 *  net.minecraft.network.play.server.SPacketPlayerPosLook$EnumFlags
 *  net.minecraft.util.math.BlockPos
 *  net.minecraftforge.fml.common.eventhandler.EventPriority
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.mixin.mixins.accessor.ISPacketPlayerPosLook;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class ChorusDelay
extends Module {
    public Setting<Boolean> setback = this.register(new Setting<Boolean>("Setback", true));
    SPacketPlayerPosLook sPacketPlayerPosLook;
    BlockPos startPos;

    public ChorusDelay() {
        super("ChorusDelay", Module.Category.EXPLOIT, "Manipulates your chorus");
    }

    @Override
    public void onEnable() {
        this.startPos = new BlockPos(ChorusDelay.mc.player.posX, ChorusDelay.mc.player.posY, ChorusDelay.mc.player.posZ);
        this.sPacketPlayerPosLook = null;
    }

    @Override
    public void onDisable() {
        this.startPos = null;
        if (this.sPacketPlayerPosLook != null) {
            ChorusDelay.mc.player.setPosition(this.sPacketPlayerPosLook.x, this.sPacketPlayerPosLook.y, this.sPacketPlayerPosLook.z);
        }
    }

    @Override
    public void onUpdate() {
        if (this.isEnabled() && !ChorusDelay.fullNullCheck() && this.startPos != null && this.setback.getValue().booleanValue()) {
            ChorusDelay.mc.player.setPosition((double)this.startPos.x, (double)this.startPos.y, (double)this.startPos.z);
        }
    }

    @SubscribeEvent(priority=EventPriority.HIGHEST, receiveCanceled=true)
    public void onPacketReceive(PacketEvent.Receive e) {
        if (e.getPacket() instanceof SPacketPlayerPosLook && this.isEnabled()) {
            try {
                SPacketPlayerPosLook packet = (SPacketPlayerPosLook)e.getPacket();
                this.sPacketPlayerPosLook = (SPacketPlayerPosLook)e.getPacket();
                ((ISPacketPlayerPosLook)packet).setX(((SPacketPlayerPosLook)e.getPacket()).getX());
                ((ISPacketPlayerPosLook)packet).setY(((SPacketPlayerPosLook)e.getPacket()).getY());
                ((ISPacketPlayerPosLook)packet).setZ(((SPacketPlayerPosLook)e.getPacket()).getZ());
                ((ISPacketPlayerPosLook)packet).setYaw(ChorusDelay.mc.player.rotationYaw);
                ((ISPacketPlayerPosLook)packet).setPitch(ChorusDelay.mc.player.rotationPitch);
                packet.getFlags().remove((Object)SPacketPlayerPosLook.EnumFlags.X_ROT);
                packet.getFlags().remove((Object)SPacketPlayerPosLook.EnumFlags.Y_ROT);
            }
            catch (Exception exception) {
                // empty catch block
            }
        }
    }

    @SubscribeEvent(priority=EventPriority.HIGHEST, receiveCanceled=true)
    public void onPacketSend(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketPlayer.PositionRotation && this.isEnabled()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer.Position && this.isEnabled()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer.Rotation && this.isEnabled()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketConfirmTeleport && this.isEnabled()) {
            event.setCanceled(true);
        }
    }
}

