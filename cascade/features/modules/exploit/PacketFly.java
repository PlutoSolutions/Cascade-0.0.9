/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.client.gui.GuiDownloadTerrain
 *  net.minecraft.entity.Entity
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.server.SPacketPlayerPosLook
 *  net.minecraft.network.play.server.SPacketPlayerPosLook$EnumFlags
 *  net.minecraft.util.math.BlockPos
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.Mod;
import cascade.event.events.MoveEvent;
import cascade.event.events.PacketEvent;
import cascade.event.events.UpdateWalkingPlayerEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.mixin.mixins.accessor.IEntityPlayerSP;
import cascade.mixin.mixins.accessor.ISPacketPlayerPosLook;
import cascade.util.EntityUtil;
import cascade.util.MathUtil;
import cascade.util.Timer;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PacketFly
extends Module {
    public Setting<Boolean> noForceRotate = this.register(new Setting<Boolean>("NoForceRotate", true));
    public Setting<Timerr> timerMode = this.register(new Setting<Timerr>("Timer", Timerr.Strict));
    public Setting<Double> factor = this.register(new Setting<Double>("Factor", 5.0, 0.1, 25.0));
    public Setting<Double> secretFactor = this.register(new Setting<Double>("SecretFactor", 1.0, 0.1, 2.5));
    public Setting<Integer> delay = this.register(new Setting<Integer>("UpdateDelay", 849, 0, 2000));
    Timer timer = new Timer();
    BlockPos startPos;
    double x;
    double z;

    public PacketFly() {
        super("PacketFly", Module.Category.EXPLOIT, "Fly with packets");
    }

    @Override
    public void onEnable() {
        this.x = 1.0;
        this.z = 1.0;
        this.timer.reset();
        Mod.timerManager.reset();
        EntityUtil.startSneaking();
        mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ, false));
        PacketFly.mc.player.setLocationAndAngles(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ, PacketFly.mc.player.rotationYaw, PacketFly.mc.player.rotationPitch);
        mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(PacketFly.mc.player.posX, PacketFly.mc.player.posY - 1339.2, PacketFly.mc.player.posZ, true));
        this.startPos = new BlockPos(PacketFly.mc.player.posX, PacketFly.mc.player.posY + 0.2, PacketFly.mc.player.posZ);
    }

    @Override
    public void onDisable() {
        this.x = 1.0;
        this.z = 1.0;
        this.timer.reset();
        Mod.timerManager.reset();
        EntityUtil.stopSneaking(false);
        this.startPos = null;
    }

    @SubscribeEvent
    public void onMove(MoveEvent e) {
        if (this.isEnabled()) {
            double[] dir = MathUtil.directionSpeed(this.factor.getValue() / 200.0);
            e.setX(dir[0]);
            e.setY(0.0);
            e.setZ(dir[1]);
        }
    }

    @SubscribeEvent
    public void onUpdateWalkingPlayer(UpdateWalkingPlayerEvent e) {
        if (!PacketFly.mc.world.getCollisionBoxes((Entity)PacketFly.mc.player, PacketFly.mc.player.getEntityBoundingBox().expand(-0.0625, 0.0, -0.0625)).isEmpty() && this.isEnabled()) {
            if (PacketFly.mc.gameSettings.keyBindSneak.isKeyDown()) {
                ((IEntityPlayerSP)PacketFly.mc.player).setServerSneakState(false);
            }
            if (this.timerMode.getValue() != Timerr.None) {
                Mod.timerManager.setTimer(this.timerMode.getValue() == Timerr.Fast ? 1.15f : 1.088f);
            }
            BlockPos pos = new BlockPos(PacketFly.mc.player.posX, PacketFly.mc.player.posY + 0.2, PacketFly.mc.player.posZ);
            if (this.timer.passedMs(this.delay.getValue().intValue()) && PacketFly.mc.world.getBlockState(this.startPos).getBlock() != PacketFly.mc.world.getBlockState(pos).getBlock()) {
                this.timer.reset();
                mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ, false));
                PacketFly.mc.player.setLocationAndAngles(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ, PacketFly.mc.player.rotationYaw, PacketFly.mc.player.rotationPitch);
                mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(PacketFly.mc.player.posX, PacketFly.mc.player.posY - 1339.2, PacketFly.mc.player.posZ, true));
            }
            PacketFly.mc.player.setVelocity(0.0, 0.0, 0.0);
            PacketFly.mc.player.noClip = true;
            if (PacketFly.mc.player.ticksExisted % 10 != 0) {
                return;
            }
            this.x = Math.cos(Math.toRadians(PacketFly.mc.player.rotationYaw + 90.0f)) * this.secretFactor.getValue();
            this.z = Math.sin(Math.toRadians(PacketFly.mc.player.rotationYaw + 90.0f)) * this.secretFactor.getValue();
            PacketFly.mc.player.setEntityBoundingBox(PacketFly.mc.player.getEntityBoundingBox().offset(0.00625 * this.x, 0.0, 0.00625 * this.z));
            Mod.movement.setMotion(PacketFly.mc.player.motionX, 0.0, PacketFly.mc.player.motionZ);
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send e) {
        if (e.getPacket() instanceof CPacketPlayer && this.isEnabled()) {
            PacketFly.mc.player.onGround = false;
        }
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.Receive e) {
        if (e.getPacket() instanceof SPacketPlayerPosLook && this.isEnabled() && !PacketFly.fullNullCheck() && this.noForceRotate.getValue().booleanValue() && !(PacketFly.mc.currentScreen instanceof GuiDownloadTerrain)) {
            SPacketPlayerPosLook packet = (SPacketPlayerPosLook)e.getPacket();
            if (PacketFly.mc.player.isEntityAlive() && PacketFly.mc.world.isBlockLoaded(new BlockPos(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ), false)) {
                PacketFly.mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                Mod.timerManager.reset();
                return;
            }
            ((ISPacketPlayerPosLook)packet).setYaw(PacketFly.mc.player.rotationYaw);
            ((ISPacketPlayerPosLook)packet).setPitch(PacketFly.mc.player.rotationPitch);
            packet.getFlags().remove((Object)SPacketPlayerPosLook.EnumFlags.X_ROT);
            packet.getFlags().remove((Object)SPacketPlayerPosLook.EnumFlags.Y_ROT);
        }
    }

    public static enum Timerr {
        Strict,
        Fast,
        None;

    }
}

